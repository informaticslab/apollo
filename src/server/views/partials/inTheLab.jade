.row
	.div(ng-class='getContentWidth()')
		.content_block
			span.visible-md.visible-lg
				.subnav
					ul.nav.nav-pills
						li
							a(href='#/quickGuide/') Quick Guide
						li
							a(href='#/browse/') Browse
						li
							a(href='#/search/') Search
						li
							a(href='#/advancedSearch/') Advanced Search
						li
							a(href='' class='inactive') Favorites
						li.active
							a(href='#/inTheLab/') In the Lab
				// end subnav
			span.visible-sm
				.subnav_sm
					ul.nav.nav-pills
						li
							a(href='#/quickGuide/') Quick Guide
						li
							a(href='#/browse/') Browse
						li.active
							a(href='#/search/') Search
						li
							a(href='#/advancedSearch/') Advanced Search
						li
							a(href='' class='inactive') Favorites
						li.active
							a(href='#/inTheLab/') In the Lab
				// end subnav
			.detail_header
				.share_button_linkage
					//These lines, 173 - 187, were added 
					//Single button 
					.btn-group
						button.btn.btn-default.dropdown-toggle(type='button', data-toggle='dropdown')
							span.glyphicon.glyphicon-share
							| &nbsp;Share &nbsp;&nbsp;
							span.caret
						ul.dropdown-menu(role='menu')
							li
								a(href='') Coming soon..
							li
								a(href='') Email
							li
								a(href='') Facebook
							li
								a(href='') Twitter
						//end added lines 
			// end detail header
			.top_block2
				.block_linkage
					.vertical_spacing1
						script.
						
							var diameter = 960,
								radius = diameter/2,
								innerRadius = radius - 120;

							var cluster = d3.layout.cluster()
								.size([360, innerRadius])
								.sort(null)
								.value(function(d) { return d.size; });

							var bundle = d3.layout.bundle();

							var line = d3.svg.line.radial()
								.interpolate(bundle)
								.tension(85)
								.radius(function(d){ return d.y;})
								.angle(function(d){return d.x / 180 * Math.PI});

							var svg = d3.select(".block_linkage").append("svg")
								.attr("width", diameter)
								.attr("height", diameter)
								.append("g")
								.attr("transform", "translate(" + radius + "," + radius + ")");

							var link = svg.append("g").selectAll(".link"),
								node = svg.append("g").selectAll(".node");
				
							d3.json("/apollo/api/inTheLab/nodes", function(error, json) {
								if(json==undefined | error)
								{	
									var errormsg=svg.append("text")
									.text("Could not retrieve all the nodes")
									.attr("class","linkageerrormsg")
									.attr("x",w/4)
									.attr("y",h/4);
								}
								else
								{	
									var nodes = cluster.nodes(packageHierarchy(json));
									//- 	links = cluster.links(nodes);
									
									//- link = link
									//- 	.data(bundle(links))
									//- 	.enter().append("path")
									//- 	.each(function(d) { d.source = d[0], d.target = d[d.length - 1]; })
									//- 	.attr("class", "link")
									//- 	.attr("d", line);

									node = node
										.data(nodes.filter(function(n){return !n.children; }))
										.enter().append("text")
										.attr("class", "node")
										.attr("dy", ".31em")
										.attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 8) + ",0)" + (d.x < 180 ? "" : "rotate(180)"); })
										.style("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
										.text(function(d) { return d.name})
										.on("mouseover", mouseovered)
										.on("mouseout", mouseouted);

									d3.select(self.frameElement).style("height", diameter + "px");

									function packageHierarchy(json){
										var map = {};

										function find(name, data){
											var node = map[name], i;
											if (!node) {
												node = map[name] = data || {name: name, children: []};
												if (name.length) {
													node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
													node.parent.children.push(node);
													node.key = name.substring(i + 1);
												}
												return node;
											}
										}

										json.forEach(function(d){
											find(d.name, d);
										});
										return map[""];
									}

									function packageImports(nodes) {
										var map = {};
										var children = [];

										nodes.forEach(function(d){
											map[d.name] = d;
										});

										nodes.forEach(function(d){
											if (d.children) d.children.forEach(function(i){
												children.push({source: map[d.name], target: map[i]});
											});
										});

										return children;
									}

									function mouseovered(d) {
										node
											.each(function(n) { n.target = n.source = false; });
										link
											.classed("link--target", function(l) { if (l.target === d) return l.source.source = true; })
											.classed("link--source", function(l) { if (l.source === d) return l.target.target = true; })
											.filter(function(l) { return l.target === d || l.source === d; })
											.each(function() { this.parentNode.appendChild(this); });
										node 
											.classed("node--target", function(n) { return n.target; })
											.classed("node--source", function(n) { return n.source; });
									}

									function mouseouted(d) {
										link
											.classed("link--target", false)
											.classed("link--source", false);
										node
											.classed("link--target", false)
											.classed("link--source", false);
									}
								
									d3.select(self.frameElement).style("height", diameter + "px");

								}
							});
							
				// end block_linkage
	.div(ng-class='getSidebarWidth()')
		.hx_side(ng-show='!showSidebar' ng-click='toggleSidebar()')
			.blue_side
				.blue_side_text
					| Your Exploration History:
				.sidebar_coming_soon
					Em (Coming soon...)
					div(ng-repeat='site in browseHistory.sites')
						a(ng-click='goToTop()' href='{{site.url}}') {{site.name}}
			.button_side
				.sidebar_button
					img(src='img/tab_button_collapse.png', alt='Collapse sidebar')			
		// end hx_side
		.hx_side(ng-show='showSidebar' ng-click='toggleSidebar()')
			.blue_side_expanded
			.button_side_expanded
				.sidebar_button
					img(src='img/tab_button_expand.png', alt='Expand sidebar')			
		// end hx_side			
// row