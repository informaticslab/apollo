.row
	.col-lg-9.col-md-9.col-sm-9
		.content_block
			.subnav
				ul.nav.nav-pills.pills_custom
					li
						a(href='#') Quick Guide
					li
						a(href='#/browse/') Browse
					li.active
						a(href='#/search/{{nodeId}}') Search
					li
						a(href='#') Advanced Search
					li
						a(href='#') Favorites
			// end subnav
			.backlink
				span.glyphicon.glyphicon-circle-arrow-left
				| Back to search results
			// end backlink class
			.entity_name
				| HHS CDC Sample Surveillance System Name
			// end entity_name class
			.nav_split
				.btn-group.btn-group-md.btn-group-justified
					.btn-group
						a.btn.btn-default(href="#/node/{{nodeId}}", id='btnDetails') Details
					.btn-group
						a.btn.btn-primary(href='#/linkage/{{nodeId}}', id='btnLinkageViewer') Linkage Viewer
				// end button group
			// end nav_split
			.detail_header
				button.btn.btn-default.pull-left.link_button1(type='button')
					span.glyphicon.glyphicon-repeat.icon-flipped
					| Reset
				button.btn.btn-default.link_button2(type='button')
					span.glyphicon.glyphicon-play.icon-flipped
					| Back
				button.btn.btn-default.link_button3(type='button')
					| Forward
					span.glyphicon.glyphicon-play
			// end detail header
			.top_block2
				.block_linkage
					.vertical_spacing
						script.
							var url = $(location).attr('href');
							var split = url.split('/');
							var id = split[split.length - 1];
							d3.json("/apollo/api/node/viewer/" + id, function(error, json) {


							var w = 1000,
							h = 600;

							var force = d3.layout.force()
							.nodes(json.nodes)
							.links(json.links)
							.size([w, h])
							.linkDistance(200)
							.charge(-1850)
							.on("tick", tick)
							.start();

							var svg = d3.select(".block_linkage").append("svg:svg")
							.attr("width", w)
							.attr("height", h);
							

							d3.select(".btn.btn-default.pull-left.link_button1").on("click", clickreset);


							var drag = force.drag()
							.on("dragstart", dragstart);  


							// build the arrow.
							svg.append("svg:defs").selectAll("marker")
							.data(["end"])
							.enter().append("svg:marker")
							.attr("id", String)
							.attr("viewBox", "0 -5 10 10")
							.attr("refX", 25)
							.attr("refY", -0.5)
							.attr("markerWidth", 6)
							.attr("markerHeight", 6)
							.attr("orient", "auto")
							.append("svg:path")
							.attr("d", "M0,-5L10,0L0,5Z")
								.attr("class","marker");

							var path = svg.append("svg:g").selectAll("path")
							.data(json.links)
							.enter().append("svg:path")
							.attr("id", function(d) { return d.source.index + "_" + d.target.index; })
							.attr("class", "link")
							.attr("marker-end", function(d) { return "url(#end)"; });




							var circle = svg.append("svg:g").selectAll("circle")
							.data(json.nodes)
							.enter().append("svg:circle")
							.attr("r", 15)
							.attr("class", function(d) { return "node " + d.label; })
							.on("dblclick", dblclick)
							.call(force.drag);

							var text = svg.append("svg:g").selectAll("g")
							.data(json.nodes)
							.enter().append("svg:g");

							// A copy of the text with a thick white stroke for legibility.
							/*text.append("svg:text")
							.attr("x", 8)
							.attr("y", ".31em")
							.attr("class", "shadow")
							.text(function(d) { return d.name; });*/

							text.append("a").attr("xlink:href",function(d) { return "/apollo/#/linkage/" + d.id; })
							.append("svg:text")
							.attr("x", 25)
							.attr("y", ".31em")
							.text(function(d) { return d.name+" ("+d.label+")"; });

							var path_label = svg.append("svg:g").selectAll(".path_label")
							.data(json.links)
							.enter().append("svg:text")
							.attr("class", "path_label")
							.append("svg:textPath")
							.attr("startOffset", "50%")
							.attr("text-anchor", "middle")
							.attr("xlink:href", function(d) { return "#" + d.source.index + "_" + d.target.index; })
							.style("fill", "#000")
							.style("font-family", "Arial")
							.text(function(d) { return d.type; });

							// Use elliptical arc path segments to doubly-encode directionality.
							function tick() {
							path.attr("d", function(d) {
							var dx = d.target.x - d.source.x,
							dy = d.target.y - d.source.y,
							dr = Math.sqrt(dx * dx + dy * dy);
							return "M" + d.source.x + "," + d.source.y + "L" + d.target.x + "," + d.target.y;
							});




							circle.attr("transform", function(d) {
							return "translate(" + d.x + "," + d.y + ")";
							});

							path_label.attr("transform", function(d) {
							return "translate(" + d.x + "," + d.y + ")";
							});

							text.attr("transform", function(d) {
							return "translate(" + d.x + "," + d.y + ")";
							});
							}

							function dblclick(d) {
							//alert(d);
							//d3.select(this).classed("fixed", d.fixed = false);
							d.fixed=false;
							d3.select(this).classed("fixed",false);
							//d3.select(this).attr("class",function(d) { return "node " + d.label; });

							//alert(d.fixed);
							}

							function clickreset(d) {
							d3.selectAll("circle").classed("fixed", false);
							i=0;
							for (n in json.nodes){
									//alert(n.id);
								json.nodes[i].fixed=false;
								i++;

							}

							

							//force.nodes.fixed=false;


							//d3.selectAll("circle").attr("class",function(d) { return "node " + d.label; });
							//alert(svg.append("svg:g").selectAll("circle").data(json.nodes).fixed);
							}

							function dragstart(d) {
							d3.select(this).classed("fixed",true);
							//d3.select(this).attr("class","node fixed");
							d.fixed=true;
							}

							});
				// end block_linkage
				.key
					table.key_details
						tr
							td.key_td
								.blue_subhead Key:
							td.node_image_td
								img(src='img/node.png')
							td.node_text_td
								| a 
								strong node
								|  – represents a program, system, data set,
								|  data source, data element, or data standard.
							td.white_divider  
							td.line_image_td
								img(src='img/line.png')
							td.line_text_td
								|  represents the relationship (manage, generate,
								|  contain, use, etc.) between any two entities.
				// end class key
				.instructions
					.blue_subhead Instructions:
					.left_bullets
						ul
							li.instruct
								| To view
								strong  hidden relationships
								| , simply click on a
								| node to bring it into the center.
							li.instruct
								| To view
								strong  more information
								| , click the
								a(href='#/node/{{nodeId}}')  Details
								|  link.
							li.instruct
								| To view
								strong  basic information
								| , simply place your
								| pointer over the node.
					// end class left_bullets
					.right_bullets
						ul
							li.instruct
								strong Reset button
								| – the original entity is reset as the center node.
							li.instruct
								strong Back button
								| – the previous entity becomes the center node.
							li.instruct
								strong Forward button
								| – the next entity becomes the center node.
					// end class right_bullets
				// end class instructions
			// end top_block2
		// end content block
	// end col spec
	.col-lg-3.col-md-3.col-sm-3
		.hx_side
			| Exploration History [placeholder]
		// end hx_side
	// end col spec
// end row
// row





		